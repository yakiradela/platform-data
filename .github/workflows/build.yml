name: Build, Migrate and Deploy
  
on:
  push:
    branches:
      - main
    paths:
      - 'data-pipelines/dags/kafka-app/**'
      - 'data-pipeline/dags/rds-app/**'
      - 'data-pipeline/dags/spark-app/**'
      - '.github/workflows/**'
      - 'infra/**'
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.0

      - name: Terraform Init & Apply
        run: |
          cd infra/environoments/dev
          terraform init
          terraform apply -auto-approve
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-2

      - name: Build Docker images for kafka-app
        run: |
          cd data-pipelines/dags/kafka-app
          docker build -f Dockerfile -t devops-data-platform-kafka:v1.0.0 .
          docker tag devops-data-platform-kafka:v1.0.0 ${{ secrets.DOCKER_USERNAME }}/devops-data-platform-kafka:v1.0.0

      - name: Build Docker images for rds-app
        run: |
          cd data-pipelines/dags/rds-app
          docker build -f Dockerfile -t devops-data-platform-rds:v1.0.0 .
          docker tag devops-data-platform-rds:v1.0.0 ${{ secrets.DOCKER_USERNAME }}/devops-data-platform-rds:v1.0.0

      - name: Build Docker images for spark-app
        run: |
          cd data-pipelines/dags/spark-app
          docker build -f Dockerfile -t devops-data-platform-spark:v1.0.0 .
          docker tag devops-data-platform-spark:v1.0.0 ${{ secrets.DOCKER_USERNAME }}/devops-data-platform-spark:v1.0.0

      - name: Push Docker images to Docker Hub
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker push ${{ secrets.DOCKER_USERNAME }}/devops-data-platform-kafka:v1.0.0
          docker push ${{ secrets.DOCKER_USERNAME }}/devops-data-platform-rds:v1.0.0
          docker push ${{ secrets.DOCKER_USERNAME }}/devops-data-platform-spark:v1.0.0

  run-db-migrations:
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: pip install -r data-pipelines/dags/rds-app/requirements.txt

      - name: Make db-migrations.sh executable
        run: chmod +x ./ci-cd/scripts/db-migrations.sh

      - name: Run DB migrations
        run: bash ./ci-cd/scripts/db-migrations.sh
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

  deploy:
    runs-on: ubuntu-latest
    needs: run-db-migrations

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup AWS CLI
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install

      - name: Update kubeconfig
        env:
          AWS_REGION: us-east-2
          CLUSTER_NAME: DEV-EKS
        run: |
          aws eks --region $AWS_REGION update-kubeconfig --name $CLUSTER_NAME

      - name: Setup kubectl
        run: |
          curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Deploy all base kustomizations
        run: |
          kubectl apply -k k8s/base/airflow
          kubectl apply -k k8s/base/app
          kubectl apply -k k8s/base/kafka-app
          kubectl apply -k k8s/base/kafka
          kubectl apply -k k8s/base/monitoring
          kubectl apply -k k8s/base/rds-app
          kubectl apply -k k8s/base/spark-app

      - name: Sync ArgoCD application
        env:
          ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }}
          ARGOCD_AUTH_TOKEN: ${{ secrets.ARGOCD_AUTH_TOKEN }}
        run: |
          argocd app sync data-platform --grpc-web --server $ARGOCD_SERVER --auth-token $ARGOCD_AUTH_TOKEN

  rollout:
    runs-on: ubuntu-latest
    needs: deploy

    steps:
      - name: Setup kubectl
        run: |
          curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Restart rollout for devops-data-platform
        run: |
          kubectl argo rollouts rollout restart rollout/devops-data-platform-rollout
